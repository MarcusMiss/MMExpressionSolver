//
//  ExpressionValueTests.swift
//  MMExpressionSolver
//

import Foundation
import Testing
@testable import MMExpressionSolver

@Suite("ExpressionValue Tests")
class ExpressionValueTests {

    @Test("Validate nil-value")
    func validateNil() async throws {
        let v = ExpressionValue.ofNil()
        #expect(v.isNumericValue == false)
        #expect(v.isNullValue == true)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.ofNil()) == true)
        #expect((v != ExpressionValue.ofNil()) == false)
        #expect((v != ExpressionValue.of(1)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate String-value")
    func validateString() async throws {
        let v = ExpressionValue.of("Hello")
        #expect(v.isNumericValue == false)
        #expect(v.isStringValue == true)
        #expect(v.asString()! == "Hello")
        #expect(v.asInteger().isPresent == false)
        #expect(v.asBoolean().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of("Hello")) == true)
        #expect((v != ExpressionValue.of("Lorem")) == true)
        #expect((v != ExpressionValue.of(1)) == true)
        #expect((v != ExpressionValue.ofNil()) == true)
        #expect((v == ExpressionValue.ofNil()) == false)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Int-value")
    func validateInt() async throws {
        let v = ExpressionValue.of(100)
        #expect(v.isNumericValue == true)
        #expect(v.isIntegerValue ==  true)
        #expect(v.asInteger()! == 100)
        #expect(v.asDouble().isPresent == false)
        #expect(v.asString().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(100)) == true)
        #expect((v != ExpressionValue.of(101)) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v != ExpressionValue.ofNil()) == true)
        #expect((v == ExpressionValue.ofNil()) == false)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Double-value")
    func validateDouble() async throws {
        let v = ExpressionValue.of(Double(100.0))
        #expect(v.isNumericValue == true)
        #expect(v.isDoubleValue == true)
        #expect(v.asDouble()! == 100.0)
        #expect(v.asFloat().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Double(100))) == true)
        #expect((v != ExpressionValue.of(Double(101))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Float-value")
    func validateFloat() async throws {
        let v = ExpressionValue.of(Float(100.0))
        #expect(v.isNumericValue == true)
        #expect(v.isFloatValue == true)
        #expect(v.asFloat()! == 100.0)
        #expect(v.asDecimal().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Float(100))) == true)
        #expect((v != ExpressionValue.of(Float(101))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Bool-value")
    func validateBool() async throws {
        let v = ExpressionValue.of(true)
        #expect(v.isNumericValue == false)
        #expect(v.isBooleanValue == true)
        #expect(v.asBoolean()! == true)
        #expect(v.asArray().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(true)) == true)
        #expect((v != ExpressionValue.of(false)) == true)
        #expect((v != ExpressionValue.of(Float(100))) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate DateTime-value")
    func validateDateTime() async throws {
        let v = ExpressionValue.of(Date.init(timeIntervalSince1970: 0.0))
        #expect(v.isNumericValue == false)
        #expect(v.isDateTime == true)
        #expect(v.asDateTime()! == Date.init(timeIntervalSince1970: 0.0))
        #expect(v.asNode().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Date.init(timeIntervalSince1970: 0.0))) == true)
        #expect((v != ExpressionValue.of(Date())) == true)
        #expect((v != ExpressionValue.of(Float(101))) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Decimal-value")
    func validateDecimal() async throws {
        let v = ExpressionValue.of(Decimal(100.0))
        #expect(v.isNumericValue == true)
        #expect(v.isDecimalValue == true)
        #expect(v.asDecimal()! == 100.0)
        #expect(v.asTupel().isPresent == false)
        #expect(v.asDateTime().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Decimal(100))) == true)
        #expect((v != ExpressionValue.of(Decimal(101))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Class-value")
    func validateClass() async throws {
        let v = ExpressionValue.of(FooClazz())!
        #expect(v.isStructureValue == true)
        #expect(v.asObject().isPresent == true)
        #expect(v.asStruct().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        //#expect(v == ExpressionValue.of(FooClazz()))
        #expect((v != ExpressionValue.of("Lorem")) == true)
        #expect((v != ExpressionValue.of(Float(100))) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Struct-value")
    func validateStruct() async throws {
        let v = ExpressionValue.of(FooStruct())!
        #expect(v.isStructureValue == true)
        #expect(v.asStruct().isPresent == true)
        #expect(v.asObject().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        //#expect(v == ExpressionValue.of(FooStruct()))
        #expect((v != ExpressionValue.of("Lorem")) == true)
        #expect((v != ExpressionValue.of(Float(100))) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Array-value")
    func validateArray() async throws {
        let v = ExpressionValue.of([])
        #expect(v.isArrayValue == true)
        #expect(v.asArray().isPresent == true)
        #expect(v.asObject().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        //#expect(v == ExpressionValue.of([])
        #expect((v != ExpressionValue.of("Lorem")) == true)
        #expect((v != ExpressionValue.of(Float(100))) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate Tupel-value")
    func validateTupel() async throws {
        let v: ExpressionValue = ExpressionValue.of(())!
        #expect(v.isTupel == true)
        #expect(v.asTupel()! == ())
        #expect(v.asStruct().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        //#expect(v == ExpressionValue.of(())
        #expect((v != ExpressionValue.of("Lorem")) == true)
        #expect((v != ExpressionValue.of(Float(100))) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate AST-value")
    func validateAST() async throws {
        let v: ExpressionValue = ExpressionValue.of(ASTNode(Token.of(position: 1, value: "1", type: .literalNumber)))
        #expect(v.isAST == true)
        #expect(v.asNode().isPresent == true)
        #expect(v.asStruct().isPresent == false)
        #expect(v.asUnitValue().isPresent == false)
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        //#expect(v == ExpressionValue.of(ASTNode(Token.of(position: 1, value: "1", type: .literalNumber)))
        #expect((v != ExpressionValue.of("Lorem")) == true)
        #expect((v != ExpressionValue.of(Float(100))) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate component-access class")
    func validateComponentAccessClass() async throws {
        let v: ExpressionValue = ExpressionValue.of(FooClazz(attribute1: "Hello", attribute2: 1))!
        try #require(v.type == .objClass)
        print(v.hasComponent("attribute1") == true)
        print(v.hasComponent("attributeX") == false)
        print(v.getComponent("attribute1").isPresent == true)
        print(v.getComponent("attributeX").isPresent == false)
        let v2: ExpressionValue = ExpressionValue.of("Murks")
        print(v2.hasComponent("attribute") == false)
        print(v2.getComponent("attribute").isPresent == false)
    }

    @Test("Validate component-access struct")
    func validateComponentAccessStruct() async throws {
        let v: ExpressionValue = ExpressionValue.of(FooStruct(attribute1: "Hello", attribute2: 1))!
        try #require(v.type == .objStruct)
        print(v.hasComponent("attribute1") == true)
        print(v.hasComponent("attributeX") == false)
        print(v.getComponent("attribute1").isPresent == true)
        print(v.getComponent("attributeX").isPresent == false)
        let v2: ExpressionValue = ExpressionValue.of("Murks")
        print(v2.hasComponent("attribute") == false)
        print(v2.getComponent("attribute").isPresent == false)
    }

    @Test("Validate component-access tupel")
    func validateComponentAccessTupel() async throws {
        let v: ExpressionValue = ExpressionValue.of(("Hello", "World"))!
        #expect(v.type == .tupel)
        print(v.hasComponent("_0") == true)
        print(v.hasComponent("_X") == false)
        print(v.getComponent("_0").isPresent == true)
        print(v.getComponent("_X").isPresent == false)
    }

    @Test("Validate UnitArea")
    func validateUnitArea() async throws {
        let v = ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
        #expect(v.isUnitDimension == true)
        #expect(v.isUnitArea == true)
        #expect(v.asUnitArea()! == Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
        #expect(v.asUnitLength().isPresent == false)
        #expect(v.asUnitVolume().isPresent == false)
        #expect(v.asUnitAngle().isPresent == false)
        #expect(v.asTupel().isPresent == false)
        #expect(v.asDateTime().isPresent == false)
        #expect(v.asUnitValue()! == Double(100.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitLength")
    func validateUnitLength() async throws {
        let v = ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))
        #expect(v.isUnitDimension == true)
        #expect(v.isUnitLength == true)
        #expect(v.asUnitLength()! == Measurement<UnitLength>(value: 100.0, unit: .kilometers))
        #expect(v.asUnitArea().isPresent == false)
        #expect(v.asUnitVolume().isPresent == false)
        #expect(v.asUnitAngle().isPresent == false)
        #expect(v.asUnitValue()! == Double(100.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitVolume")
    func validateUnitVolume() async throws {
        let v = ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
        #expect(v.isUnitDimension == true)
        #expect(v.isUnitVolume == true)
        #expect(v.asUnitVolume()! == Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
        #expect(v.asUnitArea().isPresent == false)
        #expect(v.asUnitLength().isPresent == false)
        #expect(v.asUnitAngle().isPresent == false)
        #expect(v.asUnitValue()! == Double(100.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitAngle")
    func validateUnitAngle() async throws {
        let v = ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))
        #expect(v.isUnitDimension == true)
        #expect(v.isUnitAngle == true)
        #expect(v.asUnitAngle()! == Measurement<UnitAngle>(value: 90.0, unit: .degrees))
        #expect(v.asUnitArea().isPresent == false)
        #expect(v.asUnitLength().isPresent == false)
        #expect(v.asUnitVolume().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitAngle>(value: 180.0, unit: .degrees))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitMass")
    func validateUnitMass() async throws {
        let v = ExpressionValue.of(Measurement<UnitMass>(value: 90.0, unit: .kilograms))
        #expect(v.isUnitMassWeightForce == true)
        #expect(v.isUnitMass == true)
        #expect(v.asUnitMass()! == Measurement<UnitMass>(value: 90.0, unit: .kilograms))
        #expect(v.asUnitPressure().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitMass>(value: 90.0, unit: .kilograms))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitMass>(value: 180.0, unit: .kilograms))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitPressure")
    func validateUnitPressure() async throws {
        let v = ExpressionValue.of(Measurement<UnitPressure>(value: 90.0, unit: .bars))
        #expect(v.isUnitMassWeightForce == true)
        #expect(v.isUnitPressure == true)
        #expect(v.asUnitPressure()! == Measurement<UnitPressure>(value: 90.0, unit: .bars))
        #expect(v.asUnitMass().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitPressure>(value: 90.0, unit: .bars))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitPressure>(value: 180.0, unit: .bars))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitAcceleration")
    func validateUnitAcceleration() async throws {
        let v = ExpressionValue.of(Measurement<UnitAcceleration>(value: 90.0, unit: .metersPerSecondSquared))
        #expect(v.isUnitTimeMotion == true)
        #expect(v.isUnitAcceleration == true)
        #expect(v.asUnitAcceleration()! == Measurement<UnitAcceleration>(value: 90.0, unit: .metersPerSecondSquared))
        #expect(v.asUnitDuration().isPresent == false)
        #expect(v.asUnitFrequency().isPresent == false)
        #expect(v.asUnitSpeed().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitAcceleration>(value: 90.0, unit: .metersPerSecondSquared))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitAcceleration>(value: 180.0, unit: .metersPerSecondSquared))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitDuration")
    func validateUnitDuration() async throws {
        let v = ExpressionValue.of(Measurement<UnitDuration>(value: 90.0, unit: .seconds))
        #expect(v.isUnitTimeMotion == true)
        #expect(v.isUnitDuration == true)
        #expect(v.asUnitDuration()! == Measurement<UnitDuration>(value: 90.0, unit: .seconds))
        #expect(v.asUnitAcceleration().isPresent == false)
        #expect(v.asUnitFrequency().isPresent == false)
        #expect(v.asUnitSpeed().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitDuration>(value: 90.0, unit: .seconds))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitDuration>(value: 180.0, unit: .seconds))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitFrequency")
    func validateUnitFrequency() async throws {
        let v = ExpressionValue.of(Measurement<UnitFrequency>(value: 90.0, unit: .hertz))
        #expect(v.isUnitTimeMotion == true)
        #expect(v.isUnitFrequency == true)
        #expect(v.asUnitFrequency()! == Measurement<UnitFrequency>(value: 90.0, unit: .hertz))
        #expect(v.asUnitAcceleration().isPresent == false)
        #expect(v.asUnitDuration().isPresent == false)
        #expect(v.asUnitSpeed().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitFrequency>(value: 90.0, unit: .hertz))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitFrequency>(value: 180.0, unit: .hertz))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitSpeed")
    func validateUnitSpeed() async throws {
        let v = ExpressionValue.of(Measurement<UnitSpeed>(value: 90.0, unit: .kilometersPerHour))
        #expect(v.isUnitTimeMotion == true)
        #expect(v.isUnitSpeed == true)
        #expect(v.asUnitSpeed()! == Measurement<UnitSpeed>(value: 90.0, unit: .kilometersPerHour))
        #expect(v.asUnitAcceleration().isPresent == false)
        #expect(v.asUnitDuration().isPresent == false)
        #expect(v.asUnitFrequency().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitSpeed>(value: 90.0, unit: .kilometersPerHour))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitSpeed>(value: 180.0, unit: .kilometersPerHour))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitEnergy")
    func validateUnitEnergy() async throws {
        let v = ExpressionValue.of(Measurement<UnitEnergy>(value: 90.0, unit: .kilowattHours))
        #expect(v.isUnitEnergyHeatLight == true)
        #expect(v.isUnitEnergy == true)
        #expect(v.asUnitEnergy()! == Measurement<UnitEnergy>(value: 90.0, unit: .kilowattHours))
        #expect(v.asUnitPower().isPresent == false)
        #expect(v.asUnitTemperature().isPresent == false)
        #expect(v.asUnitIlluminance().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitEnergy>(value: 90.0, unit: .kilowattHours))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitEnergy>(value: 180.0, unit: .kilowattHours))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitPower")
    func validateUnitPower() async throws {
        let v = ExpressionValue.of(Measurement<UnitPower>(value: 90.0, unit: .watts))
        #expect(v.isUnitEnergyHeatLight == true)
        #expect(v.isUnitPower == true)
        #expect(v.asUnitPower()! == Measurement<UnitPower>(value: 90.0, unit: .watts))
        #expect(v.asUnitEnergy().isPresent == false)
        #expect(v.asUnitTemperature().isPresent == false)
        #expect(v.asUnitIlluminance().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitPower>(value: 90.0, unit: .watts))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitPower>(value: 180.0, unit: .watts))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitTemperature")
    func validateUnitTemperature() async throws {
        let v = ExpressionValue.of(Measurement<UnitTemperature>(value: 90.0, unit: .celsius))
        #expect(v.isUnitEnergyHeatLight == true)
        #expect(v.isUnitTemperatur == true)
        #expect(v.asUnitTemperature()! == Measurement<UnitTemperature>(value: 90.0, unit: .celsius))
        #expect(v.asUnitPower().isPresent == false)
        #expect(v.asUnitEnergy().isPresent == false)
        #expect(v.asUnitIlluminance().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitTemperature>(value: 90.0, unit: .celsius))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitTemperature>(value: 180.0, unit: .celsius))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitIlluminance")
    func validateUnitIlluminance() async throws {
        let v = ExpressionValue.of(Measurement<UnitIlluminance>(value: 90.0, unit: .lux))
        #expect(v.isUnitEnergyHeatLight == true)
        #expect(v.isUnitIlluminance == true)
        #expect(v.asUnitIlluminance()! == Measurement<UnitIlluminance>(value: 90.0, unit: .lux))
        #expect(v.asUnitPower().isPresent == false)
        #expect(v.asUnitEnergy().isPresent == false)
        #expect(v.asUnitTemperature().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitIlluminance>(value: 90.0, unit: .lux))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitIlluminance>(value: 180.0, unit: .lux))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitElectricCharge")
    func validateUnitElectricCharge() async throws {
        let v = ExpressionValue.of(Measurement<UnitElectricCharge>(value: 90.0, unit: .ampereHours))
        #expect(v.isUnitElectricity == true)
        #expect(v.isUnitElectricCharge == true)
        #expect(v.asUnitElectricCharge()! == Measurement<UnitElectricCharge>(value: 90.0, unit: .ampereHours))
        #expect(v.asUnitElectricCurrent().isPresent == false)
        #expect(v.asUnitElectricPotentialDifference().isPresent == false)
        #expect(v.asUnitElectricResistence().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitElectricCharge>(value: 90.0, unit: .ampereHours))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitElectricCharge>(value: 180.0, unit: .ampereHours))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitElectricCurrent")
    func validateUnitElectricCurrent() async throws {
        let v = ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 90.0, unit: .amperes))
        #expect(v.isUnitElectricity == true)
        #expect(v.isUnitElectricCurrent == true)
        #expect(v.asUnitElectricCurrent()! == Measurement<UnitElectricCurrent>(value: 90.0, unit: .amperes))
        #expect(v.asUnitElectricCharge().isPresent == false)
        #expect(v.asUnitElectricPotentialDifference().isPresent == false)
        #expect(v.asUnitElectricResistence().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 90.0, unit: .amperes))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 180.0, unit: .amperes))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitElectricPotentialDifference")
    func validateUnitElectricPotentialDifference() async throws {
        let v = ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 90.0, unit: .kilovolts))
        #expect(v.isUnitElectricity == true)
        #expect(v.isUnitElectricPotentialDifference == true)
        #expect(v.asUnitElectricPotentialDifference()! == Measurement<UnitElectricPotentialDifference>(value: 90.0, unit: .kilovolts))
        #expect(v.asUnitElectricCharge().isPresent == false)
        #expect(v.asUnitElectricCurrent().isPresent == false)
        #expect(v.asUnitElectricResistence().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 90.0, unit: .kilovolts))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 180.0, unit: .kilovolts))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitElectricResistance")
    func validateUnitElectricResistance() async throws {
        let v = ExpressionValue.of(Measurement<UnitElectricResistance>(value: 90.0, unit: .ohms))
        #expect(v.isUnitElectricity == true)
        #expect(v.isUnitElectricResistance == true)
        #expect(v.asUnitElectricResistence()! == Measurement<UnitElectricResistance>(value: 90.0, unit: .ohms))
        #expect(v.asUnitElectricCharge().isPresent == false)
        #expect(v.asUnitElectricCurrent().isPresent == false)
        #expect(v.asUnitElectricPotentialDifference().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitElectricResistance>(value: 90.0, unit: .ohms))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitElectricResistance>(value: 180.0, unit: .ohms))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitConcentrationMass")
    func validateUnitConcentrationMass() async throws {
        let v = ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 90.0, unit: .gramsPerLiter))
        #expect(v.isUnitMiscellaneous == true)
        #expect(v.isUnitConcentrationMass == true)
        #expect(v.asUnitConcentrationMass()! == Measurement<UnitConcentrationMass>(value: 90.0, unit: .gramsPerLiter))
        #expect(v.asUnitDispersion().isPresent == false)
        #expect(v.asUnitFuelEfficiency().isPresent == false)
        #expect(v.asUnitInformationStorage().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 90.0, unit: .gramsPerLiter))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 180.0, unit: .gramsPerLiter))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitDispersion")
    func validateUnitDispersion() async throws {
        let v = ExpressionValue.of(Measurement<UnitDispersion>(value: 90.0, unit: .partsPerMillion))
        #expect(v.isUnitMiscellaneous == true)
        #expect(v.isUnitDispersion == true)
        #expect(v.asUnitDispersion()! == Measurement<UnitDispersion>(value: 90.0, unit: .partsPerMillion))
        #expect(v.asUnitConcentrationMass().isPresent == false)
        #expect(v.asUnitFuelEfficiency().isPresent == false)
        #expect(v.asUnitInformationStorage().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitDispersion>(value: 90.0, unit: .partsPerMillion))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitDispersion>(value: 180.0, unit: .partsPerMillion))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitFuelEfficiency")
    func validateUnitFuelEfficiency() async throws {
        let v = ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 90.0, unit: .litersPer100Kilometers))
        #expect(v.isUnitMiscellaneous == true)
        #expect(v.isUnitFuelEfficiency == true)
        #expect(v.asUnitFuelEfficiency()! == Measurement<UnitFuelEfficiency>(value: 90.0, unit: .litersPer100Kilometers))
        #expect(v.asUnitConcentrationMass().isPresent == false)
        #expect(v.asUnitDispersion().isPresent == false)
        #expect(v.asUnitInformationStorage().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 90.0, unit: .litersPer100Kilometers))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 180.0, unit: .litersPer100Kilometers))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

    @Test("Validate UnitInformationStorage")
    func validateUnitInformationStorage() async throws {
        let v = ExpressionValue.of(Measurement<UnitInformationStorage>(value: 90.0, unit: .kilobytes))
        #expect(v.isUnitMiscellaneous == true)
        #expect(v.isUnitInformationStorage == true)
        #expect(v.asUnitInformationStorage()! == Measurement<UnitInformationStorage>(value: 90.0, unit: .kilobytes))
        #expect(v.asUnitFuelEfficiency().isPresent == false)
        #expect(v.asUnitDispersion().isPresent == false)
        #expect(v.asUnitConcentrationMass().isPresent == false)
        #expect(v.asUnitValue()! == Double(90.0))
        print(v.description)
        print(v.debugDescription)
        print(v.asStringForError())
        print(v.asStandardString())
        #expect((v == ExpressionValue.of(Measurement<UnitInformationStorage>(value: 90.0, unit: .kilobytes))) == true)
        #expect((v != ExpressionValue.of(Measurement<UnitInformationStorage>(value: 180.0, unit: .kilobytes))) == true)
        #expect((v != ExpressionValue.of(true)) == true)
        #expect((v.hashValue != 0) == true)
    }

}
