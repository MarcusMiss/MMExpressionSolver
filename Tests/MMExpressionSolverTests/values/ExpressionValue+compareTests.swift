//
//  ExpressionValue+compareTestsswift
//  MMExpressionSolver
//

import Foundation
import Testing
@testable import MMExpressionSolver

@Suite("ExpressionValue compare-Operators Tests")
class ExpressionValueCOmpareOperatorsTests {

    let past: Date = Date.distantPast
    let now: Date = Date.now

    @Test("Validate ==")
    func validateEqual() async throws {
        #expect((ExpressionValue.ofNil() == ExpressionValue.ofNil()) == true)
        #expect((ExpressionValue.of(100) == ExpressionValue.of(100)) == true)
        #expect((ExpressionValue.of("Lorem") == ExpressionValue.of("Lorem")) == true)
        #expect((ExpressionValue.of(false) == ExpressionValue.of(false)) == true)
        #expect((ExpressionValue.of(false) == ExpressionValue.of(true)) == false)
        #expect((ExpressionValue.of(true) == ExpressionValue.of(false)) == false)
        #expect((ExpressionValue.of(true) == ExpressionValue.of(true)) == true)
        #expect((ExpressionValue.of(now) == ExpressionValue.of(now)) == true)
        #expect((ExpressionValue.of(FooStruct()) == ExpressionValue.of(FooStruct())) == true)
        #expect((ExpressionValue.of("") == ExpressionValue.of(false)) == false)
        // Physical dimension
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
                 == ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))
                 == ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
                 == ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))
                 == ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))) == true)
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
                 == ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))
                 == ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
                 == ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))
                 == ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))) == false)
        // Mass, Weight, and Force
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 == ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 == ExpressionValue.of(Measurement<UnitMass>(value: 50, unit: .kilograms))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 == ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 == ExpressionValue.of(Measurement<UnitPressure>(value: 50, unit: .bars))) == false)
        // Time and Motion
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 == ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 == ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 == ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))) == true)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 == ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 == ExpressionValue.of(Measurement<UnitAcceleration>(value: 200.0, unit: .gravity))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 == ExpressionValue.of(Measurement<UnitDuration>(value: 200.0, unit: .seconds))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 == ExpressionValue.of(Measurement<UnitFrequency>(value: 200.0, unit: .hertz))) == false)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 == ExpressionValue.of(Measurement<UnitSpeed>(value: 200.0, unit: .knots))) == false)
        // Energy, Heat, and Light
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 == ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 == ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 == ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == true)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 == ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == true)
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 == ExpressionValue.of(Measurement<UnitEnergy>(value: 200.0, unit: .calories))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 == ExpressionValue.of(Measurement<UnitPower>(value: 200.0, unit: .gigawatts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 == ExpressionValue.of(Measurement<UnitTemperature>(value: 200.0, unit: .celsius))) == false)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 == ExpressionValue.of(Measurement<UnitIlluminance>(value: 200.0, unit: .lux))) == false)
        // Electricity
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 == ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 == ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 == ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 == ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 == ExpressionValue.of(Measurement<UnitElectricCharge>(value: 200.0, unit: .ampereHours))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 == ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 200.0, unit: .amperes))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 == ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 200.0, unit: .kilovolts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 == ExpressionValue.of(Measurement<UnitElectricResistance>(value: 200.0, unit: .ohms))) == false)
        // Misc
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 == ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 == ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 == ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 == ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == true)
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 == ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 200.0, unit: .gramsPerLiter))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 == ExpressionValue.of(Measurement<UnitDispersion>(value: 200.0, unit: .partsPerMillion))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 == ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 200.0, unit: .litersPer100Kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 == ExpressionValue.of(Measurement<UnitInformationStorage>(value: 200.0, unit: .bits))) == false)
    }

    @Test("Validate !=")
    func validateNotEqual() async throws {
        #expect((ExpressionValue.ofNil() != ExpressionValue.of(true)) == true)
        #expect((ExpressionValue.of(false) != ExpressionValue.ofNil()) == true)
        #expect((ExpressionValue.of("Lorem") != ExpressionValue.of("Ipsum")) == true)
        #expect((ExpressionValue.of(false) != ExpressionValue.of(false)) == false)
        #expect((ExpressionValue.of(false) != ExpressionValue.of(true)) == true)
        #expect((ExpressionValue.of(true) != ExpressionValue.of(false)) == true)
        #expect((ExpressionValue.of(true) != ExpressionValue.of(true)) == false)
        #expect((ExpressionValue.of(now) != ExpressionValue.of(past)) == true)
        #expect((ExpressionValue.of(FooStruct()) != ExpressionValue.of(FooClazz())) == true)
        #expect((ExpressionValue.of("") != ExpressionValue.of(false)) == true)
        // Physical dimension
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
                 != ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))
                 != ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
                 != ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))
                 != ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))) == true)
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
                 != ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))
                 != ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
                 != ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))
                 != ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))) == false)
        // Mass, Weight, and Force
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 != ExpressionValue.of(Measurement<UnitMass>(value: 50.0, unit: .kilograms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 != ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 != ExpressionValue.of(Measurement<UnitPressure>(value: 50, unit: .bars))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 != ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))) == false)
        // Time and Motion
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 != ExpressionValue.of(Measurement<UnitAcceleration>(value: 200.0, unit: .gravity))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 != ExpressionValue.of(Measurement<UnitDuration>(value: 200.0, unit: .seconds))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 != ExpressionValue.of(Measurement<UnitFrequency>(value: 200.0, unit: .hertz))) == true)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 != ExpressionValue.of(Measurement<UnitSpeed>(value: 200.0, unit: .knots))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 != ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 != ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 != ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))) == false)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 != ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))) == false)
        // Energy, Heat, and Light
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 != ExpressionValue.of(Measurement<UnitEnergy>(value: 200.0, unit: .calories))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 != ExpressionValue.of(Measurement<UnitPower>(value: 200.0, unit: .gigawatts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 != ExpressionValue.of(Measurement<UnitTemperature>(value: 200.0, unit: .celsius))) == true)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 != ExpressionValue.of(Measurement<UnitIlluminance>(value: 200.0, unit: .lux))) == true)
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 != ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 != ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 != ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == false)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 != ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == false)
        // Electricity
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 != ExpressionValue.of(Measurement<UnitElectricCharge>(value: 200, unit: .ampereHours))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 != ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 200, unit: .amperes))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 != ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 200, unit: .kilovolts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 != ExpressionValue.of(Measurement<UnitElectricResistance>(value: 200, unit: .ohms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 != ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 != ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 != ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 != ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == false)
        // Misc
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 != ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 200, unit: .gramsPerLiter))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 != ExpressionValue.of(Measurement<UnitDispersion>(value: 200, unit: .partsPerMillion))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 != ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 200, unit: .litersPer100Kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 != ExpressionValue.of(Measurement<UnitInformationStorage>(value: 200, unit: .bits))) == true)
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 != ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 != ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 != ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 != ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == false)
    }

    @Test("Validate >=")
    func validateEqualGreat() async throws {
        #expect((ExpressionValue.ofNil() >= ExpressionValue.ofNil()) == true)
        #expect((ExpressionValue.of(200) >= ExpressionValue.of(100)) == true)
        #expect((ExpressionValue.of(200) >= ExpressionValue.of(200)) == true)
        #expect((ExpressionValue.of("Lorem") >= ExpressionValue.of("Ipsum")) == true)
        #expect((ExpressionValue.of("Lorem") >= ExpressionValue.of("Lorem")) == true)
        #expect((ExpressionValue.of(false) >= ExpressionValue.of(false)) == true)
        #expect((ExpressionValue.of(false) >= ExpressionValue.of(true)) == false)
        #expect((ExpressionValue.of(true) >= ExpressionValue.of(false)) == true)
        #expect((ExpressionValue.of(true) >= ExpressionValue.of(false)) == true)
        #expect((ExpressionValue.of(now) >= ExpressionValue.of(past)) == true)
        #expect((ExpressionValue.of(now) >= ExpressionValue.of(now)) == true)
        #expect((ExpressionValue.of(FooStruct())! >= ExpressionValue.of(FooStruct())!) == true)
        #expect((ExpressionValue.of("Lorem") >= ExpressionValue.of(10)) == false)
        // Physical dimension
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))
                 >= ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))
                 >= ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))
                 >= ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))
                 >= ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))) == true)
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))
                 >= ExpressionValue.of(Measurement<UnitArea>(value: 105.0, unit: .squareCentimeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))
                 >= ExpressionValue.of(Measurement<UnitLength>(value: 105.0, unit: .kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))
                 >= ExpressionValue.of(Measurement<UnitVolume>(value: 105.0, unit: .cubicMeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))
                 >= ExpressionValue.of(Measurement<UnitAngle>(value: 95.0, unit: .degrees))) == false)
        // Mass, Weight, and Force
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 >= ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 >= ExpressionValue.of(Measurement<UnitMass>(value: 150, unit: .kilograms))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 >= ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 >= ExpressionValue.of(Measurement<UnitPressure>(value: 150, unit: .bars))) == false)
        // Time and Motion
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 >= ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 >= ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 >= ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))) == true)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 >= ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 >= ExpressionValue.of(Measurement<UnitAcceleration>(value: 200.0, unit: .gravity))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 >= ExpressionValue.of(Measurement<UnitDuration>(value: 200.0, unit: .seconds))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 >= ExpressionValue.of(Measurement<UnitFrequency>(value: 200.0, unit: .hertz))) == false)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 >= ExpressionValue.of(Measurement<UnitSpeed>(value: 200.0, unit: .knots))) == false)
        // Energy, Heat, and Light
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 >= ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 >= ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 >= ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == true)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 >= ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == true)
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 >= ExpressionValue.of(Measurement<UnitEnergy>(value: 200.0, unit: .calories))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 >= ExpressionValue.of(Measurement<UnitPower>(value: 200.0, unit: .gigawatts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 >= ExpressionValue.of(Measurement<UnitTemperature>(value: 200.0, unit: .celsius))) == false)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 >= ExpressionValue.of(Measurement<UnitIlluminance>(value: 200.0, unit: .lux))) == false)
        // Electricity
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 >= ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 >= ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 >= ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 >= ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 >= ExpressionValue.of(Measurement<UnitElectricCharge>(value: 200.0, unit: .ampereHours))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 >= ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 200.0, unit: .amperes))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 >= ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 200.0, unit: .kilovolts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 >= ExpressionValue.of(Measurement<UnitElectricResistance>(value: 200.0, unit: .ohms))) == false)
        // Misc
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 >= ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 >= ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 >= ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 >= ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == true)
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 >= ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 200.0, unit: .gramsPerLiter))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 >= ExpressionValue.of(Measurement<UnitDispersion>(value: 200.0, unit: .partsPerMillion))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 >= ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 200.0, unit: .litersPer100Kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 >= ExpressionValue.of(Measurement<UnitInformationStorage>(value: 200.0, unit: .bits))) == false)
    }

    @Test("Validate <=")
    func validateEqualLess() async throws {
        #expect((ExpressionValue.ofNil() <= ExpressionValue.ofNil()) == true)
        #expect((ExpressionValue.of(100) <= ExpressionValue.of(200)) == true)
        #expect((ExpressionValue.of(200) <= ExpressionValue.of(200)) == true)
        #expect((ExpressionValue.of("Ipsum") <= ExpressionValue.of("Lorem")) == true)
        #expect((ExpressionValue.of("Lorem") <= ExpressionValue.of("Lorem")) == true)
        #expect((ExpressionValue.of(false) <= ExpressionValue.of(false)) == true)
        #expect((ExpressionValue.of(false) <= ExpressionValue.of(true)) == true)
        #expect((ExpressionValue.of(true) <= ExpressionValue.of(false)) == false)
        #expect((ExpressionValue.of(true) <= ExpressionValue.of(false)) == false)
        #expect((ExpressionValue.of(past) <= ExpressionValue.of(now)) == true)
        #expect((ExpressionValue.of(now) <= ExpressionValue.of(now)) == true)
        #expect((ExpressionValue.of(FooStruct())! <= ExpressionValue.of(FooStruct())!) == true)
        #expect((ExpressionValue.of("Lorem") <= ExpressionValue.of(10)) == false)
        // Physical dimension
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
                 <= ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))
                 <= ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
                 <= ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))
                 <= ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))) == true)
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 105.0, unit: .squareCentimeters))
                 <= ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 105.0, unit: .kilometers))
                 <= ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 105.0, unit: .cubicMeters))
                 <= ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 95.0, unit: .degrees))
                 <= ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))) == false)
        // Mass, Weight, and Force
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 <= ExpressionValue.of(Measurement<UnitMass>(value: 200.0, unit: .kilograms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 <= ExpressionValue.of(Measurement<UnitMass>(value: 50, unit: .kilograms))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 <= ExpressionValue.of(Measurement<UnitPressure>(value: 200.0, unit: .bars))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 <= ExpressionValue.of(Measurement<UnitPressure>(value: 50, unit: .bars))) == false)
        // Time and Motion
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 <= ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 <= ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 <= ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))) == true)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 <= ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 200.0, unit: .gravity))
                 <= ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 200.0, unit: .seconds))
                 <= ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 200.0, unit: .hertz))
                 <= ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))) == false)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 200.0, unit: .knots))
                 <= ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))) == false)
        // Energy, Heat, and Light
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 <= ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 <= ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 <= ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == true)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 <= ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == true)
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 200.0, unit: .calories))
                 <= ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 200.0, unit: .gigawatts))
                 <= ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 200.0, unit: .celsius))
                 <= ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == false)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 200.0, unit: .lux))
                 <= ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == false)
        // Electricity
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 <= ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 <= ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 <= ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 <= ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 200.0, unit: .ampereHours))
                 <= ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 200.0, unit: .amperes))
                 <= ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 200.0, unit: .kilovolts))
                 <= ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 200.0, unit: .ohms))
                 <= ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == false)
        // Misc
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 <= ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 <= ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 <= ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 <= ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == true)
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 200.0, unit: .gramsPerLiter))
                 <= ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 200.0, unit: .partsPerMillion))
                 <= ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 200.0, unit: .litersPer100Kilometers))
                 <= ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 200.0, unit: .bits))
                 <= ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == false)
    }

    @Test("Validate >")
    func validateGreat() async throws {
        #expect((ExpressionValue.ofNil() > ExpressionValue.ofNil()) == false)
        #expect((ExpressionValue.of(200) > ExpressionValue.of(100)) == true)
        #expect((ExpressionValue.of(200) > ExpressionValue.of(200)) == false)
        #expect((ExpressionValue.of("Lorem") > ExpressionValue.of("Ipsum")) == true)
        #expect((ExpressionValue.of("Lorem") > ExpressionValue.of("Lorem")) == false)
        #expect((ExpressionValue.of(false) > ExpressionValue.of(false)) == false)
        #expect((ExpressionValue.of(false) > ExpressionValue.of(true)) == false)
        #expect((ExpressionValue.of(true) > ExpressionValue.of(false)) == true)
        #expect((ExpressionValue.of(true) > ExpressionValue.of(true)) == false)
        #expect((ExpressionValue.of(now) > ExpressionValue.of(past)) == true)
        #expect((ExpressionValue.of(now) > ExpressionValue.of(now)) == false)
        #expect((ExpressionValue.of(FooStruct())! > ExpressionValue.of(FooStruct())!) == false)
        // Physical dimension
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))
                 > ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))
                 > ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))
                 > ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))
                 > ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))) == true)
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))
                 > ExpressionValue.of(Measurement<UnitArea>(value: 105.0, unit: .squareCentimeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))
                 > ExpressionValue.of(Measurement<UnitLength>(value: 150.0, unit: .kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))
                 > ExpressionValue.of(Measurement<UnitVolume>(value: 105.0, unit: .cubicMeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))
                 > ExpressionValue.of(Measurement<UnitAngle>(value: 95.0, unit: .degrees))) == false)
        // Mass, Weight, and Force
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 200.0, unit: .kilograms))
                 > ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 > ExpressionValue.of(Measurement<UnitMass>(value: 150, unit: .kilograms))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 200.0, unit: .bars))
                 > ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 > ExpressionValue.of(Measurement<UnitPressure>(value: 150, unit: .bars))) == false)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 200.0, unit: .kilograms))
                 > ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 > ExpressionValue.of(Measurement<UnitMass>(value: 150, unit: .kilograms))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 200.0, unit: .bars))
                 > ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 > ExpressionValue.of(Measurement<UnitPressure>(value: 150, unit: .bars))) == false)
        // Time and Motion
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 200.0, unit: .gravity))
                 > ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 200.0, unit: .seconds))
                 > ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 200.0, unit: .hertz))
                 > ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))) == true)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 200.0, unit: .knots))
                 > ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 > ExpressionValue.of(Measurement<UnitAcceleration>(value: 200.0, unit: .gravity))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 > ExpressionValue.of(Measurement<UnitDuration>(value: 200.0, unit: .seconds))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 > ExpressionValue.of(Measurement<UnitFrequency>(value: 200.0, unit: .hertz))) == false)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 > ExpressionValue.of(Measurement<UnitSpeed>(value: 200.0, unit: .knots))) == false)
        // Energy, Heat, and Light
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 200.0, unit: .calories))
                 > ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 200.0, unit: .gigawatts))
                 > ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 200.0, unit: .celsius))
                 > ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == true)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 200.0, unit: .lux))
                 > ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == true)
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 > ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 > ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 > ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == false)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 > ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == false)
        // Electricity
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 200.0, unit: .ampereHours))
                 > ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 200.0, unit: .amperes))
                 > ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 200.0, unit: .kilovolts))
                 > ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 200.0, unit: .ohms))
                 > ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 > ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 > ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 > ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 > ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == false)
        // Misc
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 200.0, unit: .gramsPerLiter))
                 > ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 200.0, unit: .partsPerMillion))
                 > ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 200.0, unit: .litersPer100Kilometers))
                 > ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 200.0, unit: .bits))
                 > ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == true)
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 > ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 > ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 > ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 > ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == false)
    }

    @Test("Validate <")
    func validateLess() async throws {
        #expect((ExpressionValue.ofNil() < ExpressionValue.ofNil()) == false)
        #expect((ExpressionValue.of(100) < ExpressionValue.of(200)) == true)
        #expect((ExpressionValue.of(200) < ExpressionValue.of(200)) == false)
        #expect((ExpressionValue.of("Ipsum") < ExpressionValue.of("Lorem") ) == true)
        #expect((ExpressionValue.of("Lorem") < ExpressionValue.of("Lorem")) == false)
        #expect((ExpressionValue.of(false) < ExpressionValue.of(false)) == false)
        #expect((ExpressionValue.of(false) < ExpressionValue.of(true)) == true)
        #expect((ExpressionValue.of(true) < ExpressionValue.of(false)) == false)
        #expect((ExpressionValue.of(true) < ExpressionValue.of(true)) == false)
        #expect((ExpressionValue.of(past) < ExpressionValue.of(now)) == true)
        #expect((ExpressionValue.of(now) < ExpressionValue.of(now)) == false)
        #expect((ExpressionValue.of(FooStruct())! < ExpressionValue.of(FooStruct())!) == false)
        // Physical dimension
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 100.0, unit: .squareCentimeters))
                 < ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 100.0, unit: .kilometers))
                 < ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 100.0, unit: .cubicMeters))
                 < ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 90.0, unit: .degrees))
                 < ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))) == true)
        #expect((ExpressionValue.of(Measurement<UnitArea>(value: 105.0, unit: .squareCentimeters))
                 < ExpressionValue.of(Measurement<UnitArea>(value: 101.0, unit: .squareCentimeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitLength>(value: 105.0, unit: .kilometers))
                 < ExpressionValue.of(Measurement<UnitLength>(value: 101.0, unit: .kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitVolume>(value: 105.0, unit: .cubicMeters))
                 < ExpressionValue.of(Measurement<UnitVolume>(value: 101.0, unit: .cubicMeters))) == false)
        #expect((ExpressionValue.of(Measurement<UnitAngle>(value: 95.0, unit: .degrees))
                 < ExpressionValue.of(Measurement<UnitAngle>(value: 91.0, unit: .degrees))) == false)
        // Mass, Weight, and Force
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 < ExpressionValue.of(Measurement<UnitMass>(value: 150.0, unit: .kilograms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitMass>(value: 100.0, unit: .kilograms))
                 < ExpressionValue.of(Measurement<UnitMass>(value: 50, unit: .kilograms))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 < ExpressionValue.of(Measurement<UnitPressure>(value: 150.0, unit: .bars))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPressure>(value: 100.0, unit: .bars))
                 < ExpressionValue.of(Measurement<UnitPressure>(value: 50, unit: .bars))) == false)
        // Time and Motion
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 < ExpressionValue.of(Measurement<UnitAcceleration>(value: 200.0, unit: .gravity))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 < ExpressionValue.of(Measurement<UnitDuration>(value: 200.0, unit: .seconds))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 < ExpressionValue.of(Measurement<UnitFrequency>(value: 200.0, unit: .hertz))) == true)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 < ExpressionValue.of(Measurement<UnitSpeed>(value: 200.0, unit: .knots))) == true)
        #expect((ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))
                 < ExpressionValue.of(Measurement<UnitAcceleration>(value: 100.0, unit: .gravity))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))
                 < ExpressionValue.of(Measurement<UnitDuration>(value: 100.0, unit: .seconds))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))
                 < ExpressionValue.of(Measurement<UnitFrequency>(value: 100.0, unit: .hertz))) == false)
        #expect((ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))
                 < ExpressionValue.of(Measurement<UnitSpeed>(value: 100.0, unit: .knots))) == false)
        // Energy, Heat, and Light
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 < ExpressionValue.of(Measurement<UnitEnergy>(value: 200.0, unit: .calories))) == true)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 < ExpressionValue.of(Measurement<UnitPower>(value: 200.0, unit: .gigawatts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 < ExpressionValue.of(Measurement<UnitTemperature>(value: 200.0, unit: .celsius))) == true)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 < ExpressionValue.of(Measurement<UnitIlluminance>(value: 200.0, unit: .lux))) == true)
        #expect((ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))
                 < ExpressionValue.of(Measurement<UnitEnergy>(value: 100.0, unit: .calories))) == false)
        #expect((ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))
                 < ExpressionValue.of(Measurement<UnitPower>(value: 100.0, unit: .gigawatts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))
                 < ExpressionValue.of(Measurement<UnitTemperature>(value: 100.0, unit: .celsius))) == false)
        #expect((ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))
                 < ExpressionValue.of(Measurement<UnitIlluminance>(value: 100.0, unit: .lux))) == false)
        // Electricity
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 < ExpressionValue.of(Measurement<UnitElectricCharge>(value: 200.0, unit: .ampereHours))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 < ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 200.0, unit: .amperes))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 < ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 200.0, unit: .kilovolts))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 < ExpressionValue.of(Measurement<UnitElectricResistance>(value: 200.0, unit: .ohms))) == true)
        #expect((ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))
                 < ExpressionValue.of(Measurement<UnitElectricCharge>(value: 100.0, unit: .ampereHours))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))
                 < ExpressionValue.of(Measurement<UnitElectricCurrent>(value: 100.0, unit: .amperes))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))
                 < ExpressionValue.of(Measurement<UnitElectricPotentialDifference>(value: 100.0, unit: .kilovolts))) == false)
        #expect((ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))
                 < ExpressionValue.of(Measurement<UnitElectricResistance>(value: 100.0, unit: .ohms))) == false)
        // Misc
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 < ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 200.0, unit: .gramsPerLiter))) == true)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 < ExpressionValue.of(Measurement<UnitDispersion>(value: 200.0, unit: .partsPerMillion))) == true)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 < ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 200.0, unit: .litersPer100Kilometers))) == true)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 < ExpressionValue.of(Measurement<UnitInformationStorage>(value: 200.0, unit: .bits))) == true)
        #expect((ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))
                 < ExpressionValue.of(Measurement<UnitConcentrationMass>(value: 100.0, unit: .gramsPerLiter))) == false)
        #expect((ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))
                 < ExpressionValue.of(Measurement<UnitDispersion>(value: 100.0, unit: .partsPerMillion))) == false)
        #expect((ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))
                 < ExpressionValue.of(Measurement<UnitFuelEfficiency>(value: 100.0, unit: .litersPer100Kilometers))) == false)
        #expect((ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))
                 < ExpressionValue.of(Measurement<UnitInformationStorage>(value: 100.0, unit: .bits))) == false)
    }

}
